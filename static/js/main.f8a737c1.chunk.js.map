{"version":3,"sources":["App.tsx","uitils.tsx","reportWebVitals.ts","index.tsx"],"names":["speed","board","boardSize","counter","row","currentRow","col","push","createBoard","DOWN","LEFT","RIGHT","Math","round","App","console","log","head","useState","snake","setSnake","direction","setDirection","check","num","i","length","useEffect","window","addEventListener","e","handleKeydown","key","getDirection","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","temp","className","map","rowIdx","cell","cellIdx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAoBOA,EAHE,IAEY,IAIfC,EApBc,SAACC,GAGnB,IAFA,IAAIC,EAAU,EACRF,EAAQ,GACLG,EAAM,EAAGA,EAAMF,EAAWE,IAAO,CAExC,IADA,IAAMC,EAAa,GACVC,EAAM,EAAGA,EAAMJ,EAAWI,IACjCD,EAAWE,KAAKJ,KAElBF,EAAMM,KAAKF,GAEb,OAAOJ,EAUKO,CAFK,IAKbC,EAAO,OACPC,EAAO,OACPC,EAAQ,QACRP,EAAMQ,KAAKC,MARE,GAQgB,GAC7BP,EAAMM,KAAKC,MATE,GASgB,GAmEpBC,MAlEf,WACEC,QAAQC,IAAI,WACZ,IAAMC,EAAOhB,EAAMG,GAAKE,GACxB,EAA0BY,mBAAS,CAACD,IAApC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBAASP,GAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KACMC,EAAQ,SAACC,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAChC,OAAIN,EAAMM,KAAOD,GAarBG,qBAAU,WACRC,OAAOC,iBAAiB,WAAW,SAACC,GAElCC,EAAcD,EAAEE,KAChBjB,QAAQC,IAAI,6BAEZ,IAEJ,IAAMe,EAAgB,SAACD,GACrBR,EAhBmB,SAACQ,GACpB,MAAU,YAANA,EApBG,KAqBG,cAANA,EAA0BrB,EACpB,eAANqB,EAA2BnB,EACxBD,EAYMuB,CAAaH,MCnDvB,SAAqBI,EAAqBC,GAC/C,IAAMC,EAAgBC,iBAAOH,GAG7BP,qBAAU,WACPS,EAAcE,QAAUJ,IACxB,CAACA,IAGJP,qBAAU,WAIR,GAAc,OAAVQ,EAAgB,CAClB,IAAII,EAAKC,aAJX,WACEJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IDoCJO,EAAY,kBAAMC,MAAa3C,GAE/B,IAAM2C,EAAY,WAvCT,OAwCHtB,IAAkBjB,GAAO,GACzBiB,IAAcZ,IAAML,GAAO,GAC3BiB,IAAcX,IAAMJ,GAAO,GAC3Be,IAAcV,IAAOL,GAAO,GAChC,IAAMsC,EAAO3C,EAAMG,GAAKE,GACxBc,EAAS,CAACwB,KAEZ,OACE,8BACE,sBAAKC,UAAU,qEAAf,UACE,gCACE,wBAAQA,UAAU,MAAlB,mBACA,yCAvDI,QAyDN,qBAAKA,UAAU,wBAAf,SACG5C,EAAM6C,KAAI,SAAC1C,EAAK2C,GAAN,OACT,qBAAkBF,UAAU,OAA5B,SACGzC,EAAI0C,KAAI,SAACE,EAAMC,GAAP,OACP,qBAEEJ,UAAS,+CACPtB,EAAMyB,GAAQ,aAAe,gBAF1BA,OAHDD,cEnEPG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f8a737c1.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useInterval } from \"./uitils\";\n\nconst createBoard = (boardSize: Number) => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < boardSize; row++) {\n    const currentRow = [];\n    for (let col = 0; col < boardSize; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\n\nconst speedCalculate = (fact:number) => {\n  return 10000 / fact\n}\nconst currentSpeed = 100;\n const speed = speedCalculate(currentSpeed)\n const BOARDSIZE = 20;\nconst score = 5;\nconst board = createBoard(BOARDSIZE);\nconst startingCell = 4;\nconst UP = \"UP\";\nconst DOWN = \"DOWN\";\nconst LEFT = \"LEFT\";\nconst RIGHT = \"RIGHT\";\n  let row = Math.round(BOARDSIZE / 3)\n  let col = Math.round(BOARDSIZE / 3)\nfunction App() {\n  console.log(\"started\")\n  const head = board[row][col];\n  const [snake, setSnake] = useState([head]);\n  const [direction, setDirection] = useState(RIGHT);\n  const check = (num: number) => {\n    for (let i = 0; i < snake.length; i++) {\n      if (snake[i] === num) {\n        return true;\n      }\n      return false;\n    }\n  };\n  const getDirection = (e: String) => {\n    if (e === \"ArrowUp\") return UP;\n    if (e === \"ArrowDown\") return DOWN;\n    if (e === \"ArrowRight\") return RIGHT;\n    return LEFT;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", (e) => {\n\n      handleKeydown(e.key);\n      console.log(\"added event listener\")\n    });\n  },  []);\n\n  const handleKeydown = (e: String) => {\n    setDirection(getDirection(e));\n  };\n  useInterval(() => moveSnake(), speed);\n\n  const moveSnake = () => {\n    if (direction === UP) row -= 1;\n    if (direction === DOWN) row += 1;\n    if (direction === LEFT) col -= 1;\n    if (direction === RIGHT) col += 1;\n    const temp = board[row][col]\n    setSnake([temp])\n  }\n  return (\n    <div>\n      <div className=\"bg-gray-500 min-h-screen items-center justify-center flex flex-col\">\n        <div>\n          <button className=\"p-5\">Start</button>\n          <h1>Score: {score}</h1>\n        </div>\n        <div className=\"border-2 border-black\">\n          {board.map((row, rowIdx) => (\n            <div key={rowIdx} className=\"flex\">\n              {row.map((cell, cellIdx) => (\n                <div\n                  key={cell}\n                  className={`h-15 w-15  border-2 p-2 border-black ${\n                    check(cell) ? \"bg-red-500\" : \"bg-blue-500\"\n                  }`}\n                ></div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import {useEffect, useRef} from 'react';\n\n// Copied from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min:number, max:number) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback:() => void, delay:number) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback.\n  useEffect(() => {\n     savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n// export function reverseLinkedList(head) {\n//   let previousNode = null;\n//   let currentNode = head;\n//   while (currentNode !== null) {\n//     const nextNode = currentNode.next;\n//     currentNode.next = previousNode;\n//     previousNode = currentNode;\n//     currentNode = nextNode;\n//   }\n//   return previousNode;\n// }\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}